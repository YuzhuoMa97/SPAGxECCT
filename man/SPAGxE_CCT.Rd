% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SPAGxECCT.R
\name{SPAGxE_CCT}
\alias{SPAGxE_CCT}
\title{SaddlePoint Approximation implementation of gene-environmental interaction (GxE) analysis of complex traits.}
\usage{
SPAGxE_CCT(
  traits = "survival/binary/quantitative/categorical",
  Geno.mtx,
  R,
  E,
  Phen.mtx,
  Cova.mtx,
  epsilon = 0.001,
  Cutoff = 2,
  impute.method = "fixed",
  missing.cutoff = 0.15,
  min.maf = 1e-05,
  G.model = "Add"
)
}
\arguments{
\item{Geno.mtx}{a numeric genotype matrix with each row as an individual and each column as a genetic variant.
Column names of genetic variations and row names of subject IDs are required.
Missing genotypes should be coded as NA. Both hard-called and imputed genotype data are supported.}

\item{R}{model residuals after fitting a genotype-independent model (i.e., a covariate-only model in which marginal genetic effect and GxE effect are 0)}

\item{E}{a numeric environmental factor with each element as a evnironmental factor value of an individual.}

\item{Phen.mtx}{phenotype dataframe at least including three columns of ID, surv.time and event for time-to-event trait analysis, two columns of ID and linear phenotype Y for linear trait analysis, two columns of ID and binary phenotype Y for binary trait analysis, or two columns of ID and ordinal categorical phenotype Y for ordinal categorical trait analysis.}

\item{Cova.mtx}{a covariate matrix excluding the environmental factor E.}

\item{epsilon}{a numeric value (default: 0.001) to specify the p-value cutoff for betaG estimation. Please see details for more information.}

\item{Cutoff}{a numeric value (Default: 2) to specify the standard deviation cutoff to be used.
If the test statistic lies within the standard deviation cutoff, its p value is calculated based on a normal distribution approximation,
otherwise, its p value is calculated based on a saddlepoint approximation.}

\item{impute.method}{a character string (default: "fixed") to specify the method to impute missing genotypes.
"fixed" imputes missing genotypes (NA) by assigning the mean genotype value (i.e. 2p where p is MAF).}

\item{missing.cutoff}{a numeric value (default: 0.15) to specify the cutoff of the missing rates.
Any variant with missing rate higher than this cutoff will be excluded from the analysis.}

\item{min.maf}{a numeric value (default: 0.00001) to specify the cutoff of the minimal MAF. Any SNP with MAF < cutoff will be excluded from the analysis.}

\item{G.model}{model type}
}
\value{
an R matrix with the following columns
\item{MAF}{Minor allele frequencies}
\item{missing.rate}{Missing rates}
\item{p.value.spaGxE}{p value from SPAGxE method}
\item{p.value.spaGxE.Wald}{p value from SPAGxE_Wald method}
\item{p.value.spaGxE.CCT.Wald}{p value (recommanded) from SPAGxE_CCT method}
\item{p.value.normGxE}{p value from NormGxE method (based on a normal distribution approximation)}
\item{p.value.betaG}{p value of the marginal genetic effect based on a normal distribution approximation}
\item{Stat.betaG}{score statistics testing for marginal genetic effect}
\item{Var.betaG}{estimated variances of the score statistics testing for marginal genetic effect}
\item{z.betaG}{z values (using Var1) corresponding to the score statistics testing for marginal genetic effect}
}
\description{
A scalable and accurate analysis framework for a large-scale genome-wide SPAGxECCT implementation of gene-environmental interaction (GxE) analyses of quantitative traits, binary traits, time-to-event traits, and ordinal categorical traits.
}
\details{
To run SPAGxECCT, the following two steps are required:
\itemize{
  \item Step 1: Use function SPA_G_Null_Model() to fit a genotype-independent (covariate-only) model.
  \item Step 2: Use function SPAGxE_CCT() to calculate p value for each genetic variant to conduct a GxE analysis.
}

SPAGxE_CCT() uses a hybrid strategy with both saddlepoint approximation and normal distribution approximation.
Generally speaking, saddlepoint approximation is more accurate than, but a little slower than, the traditional normal distribution approximation.
Hence, when the score statistic is close to 0 (i.e. p-values are not small), we use the normal distribution approximation.
And when the score statistic is far away from 0 (i.e. p-values are small), we use the saddlepoint approximation.
Argument 'Cutoff' is to specify the standard deviation cutoff.

To calibrate the score statistics, SPAGxE_CCT() uses martingale residuals which are calculated via R package survival for time-to-event trait analysis, residuals from glm() for binary trait analysis, resuduals from lm() for quantitative trait analysis, and residuals from clm() for ordinal categorical trait analysis via R package ordinal.
All extentions (such as strata, ties, left-censoring) supported by package survival could also be used in SPAGxE_CCT().
Time-varying covariates are also supported by splitting each subject into several observations.

Sometimes, the order of subjects between phenotype data and genotype data are different, which could lead to some errors.
To avoid that, we ask users to specify the IDs of both phenotype data (pIDs) and genotype data (gIDs) when fitting the null model.
Users are responsible to check the consistency between pIDs and formula, and the consistency between gIDs and Geno.mtx.
}
\examples{

# example 1  time-to-event phenotype
# Simulation phenotype and genotype
N = 10000
nSNP = 100
MAF = 0.1
Phen.mtx = data.frame(ID = paste0("IID-",1:N),
                      event=rbinom(N,1,0.5),
                      surv.time=runif(N),
                      Cov1=rnorm(N),
                      Cov2=rbinom(N,1,0.5),
                      E = rnorm(N))

Cova.mtx = Phen.mtx[,c("Cov1","Cov2")]

E = Phen.mtx$E

Geno.mtx = matrix(rbinom(N*nSNP,2,MAF),N,nSNP)

# NOTE: The row and column names of genotype matrix are required.
rownames(Geno.mtx) = paste0("IID-",1:N)
colnames(Geno.mtx) = paste0("SNP-",1:nSNP)


# Attach the survival package so that we can use its function Surv()
library(survival)

R = SPA_G_Get_Resid("survival",
                    Surv(surv.time,event)~Cov1+Cov2+E,
                    data=Phen.mtx,
                    pIDs=Phen.mtx$ID,
                    gIDs=paste0("IID-",1:N))

survival.res = SPAGxE_CCT("survival",
                          Geno.mtx,                     # genotype vector
                          R,                     # null model residuals (null model in which marginal genetic effect and GxE effect are 0)
                          E,                     # environmental factor
                          Phen.mtx,              # include surv.time, event
                          Cova.mtx)

# we recommand using column of 'p.value.spaGxE.CCT.Wald' to associate genotype with time-to-event phenotypes
head(survival.res)


# example 2  binary phenotype
# Simulation phenotype and genotype
N = 10000
nSNP = 100
MAF = 0.1
Phen.mtx = data.frame(ID = paste0("IID-",1:N),
                      Y=rbinom(N,1,0.5),
                      Cov1=rnorm(N),
                      Cov2=rbinom(N,1,0.5),
                      E = rnorm(N))

Cova.mtx = Phen.mtx[,c("Cov1","Cov2")]

E = Phen.mtx$E

Geno.mtx = matrix(rbinom(N*nSNP,2,MAF),N,nSNP)

# NOTE: The row and column names of genotype matrix are required.
rownames(Geno.mtx) = paste0("IID-",1:N)
colnames(Geno.mtx) = paste0("SNP-",1:nSNP)

R = SPA_G_Get_Resid("binary",
                    glm(formula = Y ~ Cov1+Cov2+E, data = Phen.mtx, family = "binomial"),
                    data=Phen.mtx,
                    pIDs=Phen.mtx$ID,
                    gIDs=paste0("IID-",1:N))

binary.res = SPAGxE_CCT("binary",
                        Geno.mtx,                     # genotype vector
                        R,                     # null model residuals (null model in which marginal genetic effect and GxE effect are 0)
                        E,                     # environmental factor
                        Phen.mtx,              # include surv.time, event
                        Cova.mtx)

# we recommand using column of 'p.value.spaGxE.CCT.Wald' to associate genotype with binary phenotypes
head(binary.res)


# example 3  quantitative phenotype
# Simulation phenotype and genotype
N = 10000
nSNP = 100
MAF = 0.1
Phen.mtx = data.frame(ID = paste0("IID-",1:N),
                      Y=rnorm(N,1,0.5),
                      Cov1=rnorm(N),
                      Cov2=rbinom(N,1,0.5),
                      E = rnorm(N))

Cova.mtx = Phen.mtx[,c("Cov1","Cov2")]

E = Phen.mtx$E

Geno.mtx = matrix(rbinom(N*nSNP,2,MAF),N,nSNP)

# NOTE: The row and column names of genotype matrix are required.
rownames(Geno.mtx) = paste0("IID-",1:N)
colnames(Geno.mtx) = paste0("SNP-",1:nSNP)


R = SPA_G_Get_Resid("quantitative",
                    lm(formula = Y ~ Cov1+Cov2+E, data = Phen.mtx),
                    data=Phen.mtx,
                    pIDs=Phen.mtx$ID,
                    gIDs=paste0("IID-",1:N))

quantitative.res = SPAGxE_CCT("quantitative",
                               Geno.mtx,                     # genotype vector
                               R,                     # null model residuals (null model in which marginal genetic effect and GxE effect are 0)
                               E,                     # environmental factor
                               Phen.mtx,              # include surv.time, event
                               Cova.mtx)

# we recommand using column of 'p.value.spaGxE.CCT.Wald' to associate genotype with binary phenotypes
head(quantitative.res)

}
